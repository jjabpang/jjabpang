# This is a basic workflow to help you get started with Actions
name: Build and Deploy Spring Boot to AWS EC2

# main 브랜치에 푸쉬 했을때
on:
    push:
        branches: [ master ]

# 해당 코드에서 사용될 변수 설정
env:
    PROJECT_NAME: jjabpang
    BUCKET_NAME: jjabpang
    CODE_DEPLOY_APP_NAME: codeDeploy-test
    DEPLOYMENT_GROUP_NAME: codeDeploy-test
    DB_DATABASE: jdbc:mysql://jjabpang.c4ccun7w5hlo.ap-northeast-2.rds.amazonaws.com:3306/jjabpang?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    DB_USER: jjabpang
    DB_PASSWORD: 34103410

jobs:
    build:
        runs-on: ubuntu-20.04
        steps:
            -   name: Set up MySQL
                run: |
                    sudo /etc/init.d/mysql start
                    mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
            -   name: Checkout
                uses: actions/checkout@v2
            
            -   name: Setup Java JDK 11
                uses: actions/setup-java@v1
                with:
                    java-version: 11
            
            ## gitignore한 파일 생성해주기
            ## create application.properties
            -   name: make application-aws.properties
                if: true # branch가 develop일 때
                run: |
                    # spring의 resources 경로로 이동
                    cd ./src/main/resources
                    touch ./application-aws.properties
                    # GitHub-Actions에서 설정한 값을 application-dev.properties 파일에 쓰기
                    echo "${{ secrets.PROPERTIES }}" > ./application-aws.properties
                shell: bash
                
                #gradlew 파일 실행권한 설정
            -   name: Grant execute permission for gradlew
                run: chmod +x ./gradlew
                shell: bash
                
                #빌드 시작
            -   name: Build with Gradle
                run: ./gradlew build
                shell: bash
                
                #프로젝트 zip파일로 압축
            -   name: Make Zip File
                run: zip -qq -r ./$GITHUB_SHA.zip .
                shell: bash
                
                #aws 접근 id, key
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ap-northeast-2
                
                    # s3에 압축한 zip파일 업로드
            -   name: Upload to S3
                run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
                
                # s3에 업로드한 파일 code Deploy에서 배포 요청
            -   name: Code Deploy
                run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip

